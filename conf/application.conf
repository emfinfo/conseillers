# This is the main configuration file for the application.
# https://www.playframework.com/documentation/2.6.20/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
# include "extra-config.conf"
#
# You can declare variables and substitute for them:
# mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
# mykey = ${JAVA_HOME}

# Nom de l'application à afficher
application.name="Conseillers"

# Version de l'application à afficher
application.version="1.4.2"

# Timeout en [ms] -> 60'000[ms/min] x 60[min/h] = 3'600'000 [ms/h]
application.msTimeout = 10000

# Validité du cookie de session en [ms]
play.http.session.maxAge = 3600000

# Supprime le cookie du navigateur après le temps spcifié ci-dessus
play.http.session.jwt.expiresAfter = ${play.http.session.maxAge}

play.allowGlobalApplication=false
play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

## Akka
# https://www.playframework.com/documentation/2.6.20/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key="v/OZ5owOsDEmNL`CSbD:_8?YNji6SHyDaG:e9vC9cO=r^lqjHvvploYA=u=KA4bq"

## Request handler object class for this application
play.http.actionCreator="controllers.actions.ActionCreator"

#filtres privés
#play.http.filters="filters.Filters"

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "fr" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
jpa.default="prodPU"
db.default.jndiName="DefaultDS"

# local DB
db.default.url="mysql://root:emf@localhost:3306/parlement?useSSL=false&amp;serverTimezone=UTC"
db.default.data.version=14.8.2019

#db.default.sharedCache.mode="NONE"
#dbplugin=disabled
#db.default.idleMaxAge=10 minutes
#db.default.idleConnectionTestPeriod=15 seconds
#db.default.connectionTimeout=10 second
#db.default.connectionTestStatement="SELECT 1"
#db.default.maxConnectionAge=30 minutes

# Evolutions
# ~~~~~
# You can disable evolutions if needed
evolutionplugin=disabled

# filtres préinstallés depuis play 2.6.x
#play.filters.enabled = []
play.filters.enabled += "play.filters.gzip.GzipFilter"
play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.disabled += "play.filters.csrf.CSRFFilter"
play.filters.disabled += "play.filters.headers.SecurityHeadersFilter"
play.filters.enabled += "play.filters.hosts.AllowedHostsFilter"
play.filters.hosts {
  allowed = ["localhost:9000", "localhost:5000", "localhost:8383",
             "localhost:5500", "127.0.0.1:5500", "192.168.0.182:9000"]
}

play.filters.cors {
  allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  allowedHttpHeaders = ["Accept"]
  preflightMaxAge = 3 days
}
 # allowedHttpHeaders = ["Accept"]
#    allowedOrigins = ["http://localhost", "https://jcstritt.emf-informatique.ch"]

#pathPrefixes = ["/some/path", ...]
#allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
#allowedOrigins = ["http://localhost", "http://jcstritt.emf-informatique.ch"]
#allowedHttpHeaders = ["Origin, Content-Type"]
#    preflightMaxAge = 3 days

## Modules.
# play.modules.disabled+="play.api.mvc.CookiesModule"
#play.modules.enabled+="modules.GuiceModule"

## Data base management by Hikari pool
# nouveau 23.10.2018 d'après exemple
# voir sur https://github.com/playframework/play-java-jpa-example

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
# db connections = ((physical_core_count * 2) + effective_spindle_count)
fixedConnectionPool = 9

# Set Hikari to fixed size (voir https://stackoverflow.com/questions/28987540/why-does-hikaricp-recommend-fixed-size-pool-for-better-performance) 
play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = 200
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
      fixed-pool-size = ${fixedConnectionPool}
  }
}